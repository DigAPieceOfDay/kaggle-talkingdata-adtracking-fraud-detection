data = {
    dir = ../data
    files = {
        train = train.csv
        test = test.csv
        test_supplement = test_supplement.csv
        test_merged = test_merged.csv
    }
    ntrain = 184903890
}

factors = {
#    hash_id = {
#        ip_app_device_os_hash = {
#            columns = [ip, app, device, os]
#            groupby = [ip, app, device, os]
#            num_bits = 27
#            dtype = uint32
#        }
#    }

    click_time_no_hash = {
        ip_app_device_os_t_prev = {
            columns = [ip, app, device, os, epoch]
            groupby = [ip, app, device, os]
            reverse = false
            dtype = uint32
        },
        ip_app_device_os_t_next = {
            columns = [ip, app, device, os, epoch]
            groupby = [ip, app, device, os]
            reverse = true
            dtype = uint32
        },
        ip_app_device_os_t_prev_2 = {
            columns = [ip, app, device, os, epoch]
            groupby = [ip, app, device, os]
            reverse = false
            step = 2
            dtype = uint32
        },
        ip_app_device_os_t_next_2 = {
            columns = [ip, app, device, os, epoch]
            groupby = [ip, app, device, os]
            reverse = true
            step = 2
            dtype = uint32
        }
        ip_app_device_os_t_prev_3 = {
            columns = [ip, app, device, os, epoch]
            groupby = [ip, app, device, os]
            reverse = false
            step = 3
            dtype = uint32
        },
        ip_app_device_os_t_next_3 = {
            columns = [ip, app, device, os, epoch]
            groupby = [ip, app, device, os]
            reverse = true
            step = 3
            dtype = uint32
        }
        ip_app_device_os_channel_t_prev = {
            columns = [ip, app, device, os, channel, epoch]
            groupby = [ip, app, device, os, channel]
            reverse = false
            dtype = uint32
        },
        ip_app_device_os_channel_t_next = {
            columns = [ip, app, device, os, channel, epoch]
            groupby = [ip, app, device, os, channel]
            reverse = true
            dtype = uint32
        },
    }

    aggr = {
        ip_nunique_channel = {
            columns = [ip, channel]
            groupby = [ip]
            select = channel
            aggr = nunique
            dtype = uint8
        },
        ip_device_os_cumcount_app = {
            columns = [ip, device, os, app]
            groupby = [ip, device, os]
            select = app
            aggr = cumcount
            dtype = uint32
        },
        ip_day_nunique_hour = {
            columns = [ip, day, hour]
            groupby = [ip, day]
            select = hour
            aggr = nunique
            dtype = uint32
        },
        ip_nunique_app = {
            columns = [ip, app]
            groupby = [ip]
            select = app
            aggr = nunique
            dtype = uint8
        },
        ip_app_nunique_os = {
            columns = [ip, app, os]
            groupby = [ip, app]
            select = os
            aggr = nunique
            dtype = uint8
        },
        ip_nunique_device = {
            columns = [ip, device]
            groupby = [ip]
            select = device
            aggr = nunique
            dtype = uint16
        },
        app_nunique_channel = {
            columns = [app, channel]
            groupby = [app]
            select = channel
            aggr = nunique
            dtype = uint32
        },
        ip_cumcount_os = {
            columns = [ip, os]
            groupby = [ip]
            select = os
            aggr = cumcount
            dtype = uint32
        },
        ip_device_os_nunique_app = {
            columns = [ip, device, os, app]
            groupby = [ip, device, os]
            select = app
            aggr = nunique
            dtype = uint32
        },
        ip_day_hour_count = {
            columns = [ip, day, hour, channel]
            groupby = [ip, day, hour]
            select = channel
            aggr = count
            dtype = uint32
        },
        ip_app_count = {
            columns = [ip, app, channel]
            groupby = [ip, app]
            select = channel
            aggr = count
            dtype = uint32
        },
        ip_app_os_count = {
            columns = [ip, app, os, channel]
            groupby = [ip, app, os]
            select = channel
            aggr = count
            dtype = uint32
        },
        ip_day_channel_var_hour = {
            columns = [ip, day, channel, hour]
            groupby = [ip, day, channel]
            select = hour
            aggr = var
            dtype = float32
        },
        ip_app_os_var_hour = {
            columns = [ip, app, os, hour]
            groupby = [ip, app, os]
            select = hour
            aggr = var
            dtype = float32
        },
        ip_app_channel_var_day = {
            columns = [ip, app, channel, day]
            groupby = [ip, app, channel]
            select = day
            aggr = var
            dtype = float32
        },
        ip_app_channel_mean_hour = {
            columns = [ip, app, channel, hour]
            groupby = [ip, app, channel]
            select = hour
            aggr = mean
            dtype = float32
        }
    }
}

factors_pd = {
    dump = {
        dir = "../dumps/factors_baris_04/"
    }
    source = "../data/columns"
    factors = ${factors}
}

catboost = {
    dump = {
        dir = "../dumps/catboost_10"
    }

    data = {
        dir = "../data/columns"
        train = {
            index = subsample_not_attributed_10pct
        }
        test = {
            index = submission
        }
    }

    target = is_attributed

    features = [
        app,
        device,
        os,
        channel,
        hour,
        day,
        ip_app_device_os_t_next,
        ip_app_device_os_t_prev,
        ip_app_device_os_t_next_2,
        ip_app_device_os_t_prev_2,
        ip_nunique_channel,
        ip_device_os_cumcount_app,
        ip_day_nunique_hour,
        ip_nunique_app,
        ip_app_nunique_os,
        ip_nunique_device,
        app_nunique_channel,
        ip_cumcount_os,
        ip_device_os_nunique_app,
        ip_day_hour_count,
        ip_app_count,
        ip_app_os_count,
        ip_day_channel_var_hour,
        ip_app_os_var_hour,
        ip_app_channel_var_day,
        ip_app_channel_mean_hour
    ]

    categorical_features = [
        app,
        device,
        os,
        channel,
        hour,
        day
    ]

    options = {
        eval_metric = AUC
        learning_rate = 0.1
        iterations = 500
        depth = 6
        rsm=0.7
        simple_ctr = [Counter, Counter, Counter, Counter, Counter, Counter]
    }

    hyperopt = {
        enabled = false
        max_evals = 25
        space = {
            l2_leaf_reg = {
                expression = loguniform,
                params = {
                    low = 3.0
                    high = 5.0
                }
            }
            learning_rate = {
                expression = loguniform,
                params = {
                    low = -5.0
                    high = -0.5
                }
            }
        }
    }
}

lightgbm = {
    dump = {
        dir = "../dumps/lightgbm_20"
    }

    data = {
        dir = "../data/columns"
        train = {
            index = subsample_not_attributed_50pct_2
            # index = subsample_not_attributed_50pct
            # index = subsample_not_attributed_10pct
            # index = days_8_9_hours_4_5_9_10_13_14_attributed
        }
        test = {
            index = submission
        }
    }

    label = is_attributed

    features = [
        app,
        device,
        os,
        channel,
        hour,
        day,
        ip_app_device_os_t_next,
        ip_app_device_os_t_prev,
        ip_app_device_os_t_prev_2,
        ip_app_device_os_t_next_2,
        ip_nunique_channel,
        ip_device_os_cumcount_app,
        ip_day_nunique_hour,
        ip_nunique_app,
        ip_app_nunique_os,
        ip_nunique_device,
        app_nunique_channel,
        ip_cumcount_os,
        ip_device_os_nunique_app,
        ip_day_hour_count,
        ip_app_count,
        ip_app_os_count,
        ip_day_channel_var_hour,
        ip_app_os_var_hour,
        ip_app_channel_var_day,
        ip_app_channel_mean_hour,
        libffm_oof
    ]

    categorical_features = [
        app,
        device,
        os,
        channel,
        hour,
        day
    ]

    params = {
        objective = binary
        metric = auc
        learning_rate = 0.1
        max_depth = 3
        num_leaves = 7
        min_child_samples = 100
        min_child_weight = 0
        max_bin = 100
        subsample = 0.7
        subsample_freq = 1
        colsample_bytree = 0.9
        scale_pos_weight = 100.0
        early_stopping_rounds = 1000
        num_threads = 15
    }

    options = {
        num_boost_round = 1500
        verbose_eval = 10
    }

    valid_size = 0
}

libffm = {
    dump = {
        dir = "../dumps/libffm_00"
    }

    data = {
        dir = "../data/columns"
    }

    options = {
        learning_rate = "0.1"
        factor = "12"
        lambda = "0.00002"
        num_iter = "2"
    }
}

